// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../generated"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    ORGANIZATION
    INSTITUTION
}

model Account {
    id                String   @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    coverImage    String?
    bio           String?
    institution   String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @map(name: "updated_at")
    role      UserRole @default(STUDENT)

    accounts               Account[]
    sessions               Session[]
    post                   Post[]
    comment                Comment[]
    like                   Like[]
    followers              Follower[]      @relation("UserFollowers")
    following              Follower[]      @relation("UserFollowings")
    followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
    followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
    block                  Block[]         @relation("BlocksSent")
    blockBy                Block[]         @relation("BlocksReceived")
    stories                Story?
    Follower               Follower[]
    FollowRequest          FollowRequest[]
    Block                  Block[]

    @@map(name: "users")
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Post {
    id        String    @id @default(cuid()) @map("_id")
    desc      String
    img       String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comments  Comment[]
    likes     Like[]

    @@map(name: "posts")
}

model Comment {
    id        String   @id @default(cuid()) @map("_id")
    desc      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    postId String
    likes  Like[]

    @@map(name: "comments")
}

model Like {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    userId    String
    postId    String?
    commentId String?

    @@map(name: "likes")
}

model Follower {
    id          String   @id @default(cuid()) @map("_id")
    createdAt   DateTime @default(now())
    follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?

    @@map(name: "followers")
}

model FollowRequest {
    id         String   @id @default(cuid()) @map("_id")
    createdAt  DateTime @default(now())
    sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
    senderId   String
    receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId String
    User       User?    @relation(fields: [userId], references: [id])
    userId     String?

    @@unique([senderId, receiverId])
    @@map(name: "follow_requests")
}

model Block {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
    blockerId String
    blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
    blockedId String
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@unique([blockerId, blockedId])
    @@map(name: "blocks")
}

model Story {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    expiresAt DateTime
    img       String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique

    @@map(name: "stories")
}
