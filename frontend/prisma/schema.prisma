// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    ORGANIZATION
    INSTITUTION
}

model Account {
    id                String   @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    username      String    @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    coverImage    String?
    bio           String?
    website       String?
    institution   String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @map(name: "updated_at")
    role      UserRole @default(STUDENT)

    accounts Account[]
    sessions Session[]
    posts    Post[]
    comments Comment[]
    likes    Like[]

    followers              Follower[]      @relation("UserFollowers")
    followings             Follower[]      @relation("UserFollowings")
    followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
    followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
    blocksGiven            Block[]         @relation("BlocksSent")
    blocksReceived         Block[]         @relation("BlocksReceived")
    story                  Story?
    Notification           Notification[]  @relation("userNotifications")

    @@map(name: "users")
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Post {
    id           String         @id @default(cuid()) @map("_id")
    desc         String
    img          String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    userId       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments     Comment[]
    likes        Like[]
    Notification Notification[]

    @@map(name: "posts")
}

model Comment {
    id           String         @id @default(cuid()) @map("_id")
    desc         String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    userId       String
    postId       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
    likes        Like[]
    Notification Notification[]

    @@map(name: "comments")
}

model Like {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    userId    String
    postId    String?
    commentId String?
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@map(name: "likes")
}

model Follower {
    id          String   @id @default(cuid()) @map("_id")
    createdAt   DateTime @default(now())
    followerId  String
    followingId String
    follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@map(name: "followers")
}

model FollowRequest {
    id         String   @id @default(cuid()) @map("_id")
    createdAt  DateTime @default(now())
    senderId   String
    receiverId String
    sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
    receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

    @@unique([senderId, receiverId])
    @@map(name: "follow_requests")
}

model Block {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    blockerId String
    blockedId String
    blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
    blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)

    @@unique([blockerId, blockedId])
    @@map(name: "blocks")
}

model Story {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    expiresAt DateTime
    img       String
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "stories")
}

model Notification {
    id        String           @id @default(cuid()) @map("_id")
    userId    String
    creatorId String
    type      NotificationType
    read      Boolean          @default(false)
    postId    String?
    commentId String?
    createdAt DateTime         @default(now())

    // Relations
    user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt])
}

enum NotificationType {
    LIKE
    COMMENT
    FOLLOW
}
