// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  PROFESSOR
  INSTITUTION
  ORGANIZATION
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

model Account {
  id     String @id @default(cuid()) @map("_id")
  userId String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id     String @id @default(cuid()) @map("_id")
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  @@unique([token])
  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id          String  @id @default(cuid()) @map("_id")
  instituteId String?

  name            String
  email           String    @unique
  emailVerified   Boolean
  image           String?
  coverImage      String?
  bio             String?
  institution     String?
  currentSeamster Int?
  role            UserRole  @default(STUDENT)
  twoFactor       Boolean   @default(false)
  username        String?
  displayUsername String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  followers             Follow[]       @relation("UserFollowers")
  followings            Follow[]       @relation("UserFollowings")
  block                 Block[]        @relation("BlocksSent")
  blockBy               Block[]        @relation("BlocksReceived")
  TwoFactor             TwoFactor[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  bookmarks             Bookmark[]
  job                   Job[]
  company               Company[]
  application           Application[]
  research              Research[]
  saveJob               SaveJob[]
  saveResearch          SaveResearch[]

  @@unique([username])
  @@map(name: "users")
}

model Research {
  id String @id @default(cuid()) @map("_id")

  title       String
  description String
  content     String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  saveResearch        SaveResearch[]

  @@map(name: "researches")
}

model Skill {
  id      String   @id @default(cuid()) @map("_id")
  title   String
  content String[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  Job       Job[]

  @@map(name: "skills")
}

model Job {
  id              String   @id @default(cuid()) @map("_id")
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  weeklyHours     Int
  requirements    String[]
  salary          Float
  location        String
  type            String
  experienceLevel String
  duration        Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String

  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  company             Company[]
  application         Application[]
  saveJob             SaveJob[]

  @@map(name: "jobs")
}

model Company {
  id String @id @default(cuid()) @map("_id")

  name        String
  description String?
  website     String?
  location    String?
  logo        String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
  jobId  String
  job    Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "companies")
}

model Application {
  id String @id @default(cuid()) @map("_id")

  applicantId String
  applicant   User   @relation(fields: [applicantId], references: [id])
  jobId       String
  job         Job    @relation(fields: [jobId], references: [id])

  status ApplicationStatus @default(pending)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "applications")
}

model Post {
  id      String @id @default(cuid()) @map("_id")
  content String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  bookmarks           Bookmark[]

  @@map(name: "posts")
}

model Media {
  id       String    @id @default(cuid()) @map("_id")
  type     MediaType
  url      String
  fileKey  String?
  fileSize Int?

  postId     String?
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  job        Job?      @relation(fields: [jobId], references: [id])
  jobId      String?
  research   Research? @relation(fields: [researchId], references: [id])
  researchId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid()) @map("_id")
  content String

  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  job        Job?      @relation(fields: [jobId], references: [id])
  jobId      String?
  research   Research? @relation(fields: [researchId], references: [id])
  researchId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map("comments")
}

model Like {
  id         String    @id @default(cuid()) @map("_id")
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  job        Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String?
  research   Research? @relation(fields: [researchId], references: [id], onDelete: Cascade)
  researchId String?

  @@unique([userId, postId, jobId, researchId])
  @@map(name: "likes")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  follower    User   @relation("UserFollowings", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map(name: "follows")
}

model Block {
  id String @id @default(cuid()) @map("_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  blocker   User   @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User   @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
  @@map(name: "blocks")
}

model Verification {
  id String @id @default(cuid()) @map("_id")

  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verifications")
}

model TwoFactor {
  id          String @id @default(cuid()) @map("_id")
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([userId, postId])
  @@map(name: "bookmarks")
}

model SaveJob {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([userId, jobId])
  @@map(name: "save_jobs")
}

model SaveResearch {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchId String
  research   Research @relation(fields: [researchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([userId, researchId])
  @@map(name: "save_researches")
}

model Notification {
  id          String           @id @default(cuid()) @map("_id")
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  job         Job?             @relation(fields: [jobId], references: [id])
  jobId       String?
  research    Research?        @relation(fields: [researchId], references: [id])
  researchId  String?
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
