// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ORGANIZATION
  INSTITUTION
}

model Account {
  id     String @id @default(cuid()) @map("_id")
  userId String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id     String @id @default(cuid()) @map("_id")
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  @@unique([token])
  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id              String  @id @default(cuid()) @map("_id")
  displayUsername String?

  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  coverImage    String?
  bio           String?
  institution   String?
  role          UserRole @default(STUDENT)
  twoFactor     Boolean  @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  followers             Follow[]       @relation("UserFollowers")
  followings            Follow[]       @relation("UserFollowings")
  block                 Block[]        @relation("BlocksSent")
  blockBy               Block[]        @relation("BlocksReceived")
  stories               Story?
  Block                 Block[]
  TwoFactor             TwoFactor[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  bookmarks             Bookmark[]

  username   String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([username])
  @@map(name: "users")
}

model Post {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  bookmarks           Bookmark[]

  @@map(name: "posts")
}

model Media {
  id     String    @id @default(cuid()) @map("_id")
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map(name: "post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid()) @map("_id")
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map(name: "likes")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map(name: "follows")
}

model Block {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([blockerId, blockedId])
  @@map(name: "blocks")
}

model Story {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  @@map(name: "stories")
}

model Verification {
  id String @id @default(cuid()) @map("_id")

  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verifications")
}

model TwoFactor {
  id          String @id @default(cuid()) @map("_id")
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map(name: "bookmarks")
}

model Notification {
  id          String           @id @default(cuid()) @map("_id")
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map(name: "notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
